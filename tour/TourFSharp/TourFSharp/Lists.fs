module Lists

    /// Lists are defined using [...]. This is an mepty list.
    let list1 = [ ]

    /// This a list with 3 elements. ';' is used to separate elements on the
    /// same line
    let list2 = [ 1; 2; 3 ]

    /// You can aslo separate elements by placing them on own lines.
    let list3 = [
        1
        2
        3
    ]

    /// This is a list of integers from 1 to 1000
    let numberList = [ 1 .. 1000 ]

    /// Lists can also be generated by computations. This is a list containing 
    /// all the days of the year.
    ///
    /// 'yield' is used for on-damand evaluation. More on this later in Sequences.
    let daysList =
        [ for month in 1 .. 12 do
            for day in 1 .. System.DateTime.DaysInMonth(2023, month) do
                yield System.DateTime(2023, month, day) ]

    // Print the first 5 elements of 'daysList' using 'List.take'.
    printfn $"The first 5 days of 2023 are: {daysList |> List.take 5}"

    /// Computations can include conditionals.  This is a list containing the tuples
    /// which are coordinates of black squares on a chess board.
    let blackSquares =
        [ for i in 0 .. 7 do
            for j in 0 .. 7 do 
                if (i+j) % 2 = 1 then
                    yield (i, j) ]

    /// Lists can be transformed using 'List.map' and other functional programming combinators
    /// This definition produces a new list by squaring the numbers in numbersList, using the pipelin
    /// operator to pass an argument to List.map
    let squares =
        numberList
        |> List.map (fun x -> x*x)

    /// There are many other list combinations, the following computes the sum of the squares of the
    /// numbers divisible by three
    let sumOfSquares =
        numberList
        |> List.filter (fun x -> x % 3 = 0)
        |> List.sumBy (fun x -> x * x)
    
    printfn $"The sum of the squares of numbers up to 1000 that are divisible by 3 is: %d{sumOfSquares}"
    ;;

